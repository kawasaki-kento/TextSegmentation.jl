var documenterSearchIndex = {"docs":
[{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = TextSegmentation","category":"page"},{"location":"index.html#TextSegmentation","page":"Home","title":"TextSegmentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for TextSegmentation.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules = [TextSegmentation.Utls, TextSegmentation.TextTiling, TextSegmentation.C99, TextSegmentation.TopicTiling]","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules = [TextSegmentation.Utls, TextSegmentation.TextTiling, TextSegmentation.C99, TextSegmentation.TopicTiling]","category":"page"},{"location":"index.html#TextSegmentation.Utls.calculate_cosin_similarity-Tuple{Any, Any}","page":"Home","title":"TextSegmentation.Utls.calculate_cosin_similarity","text":"calculate_cosin_similarity(elements_dct_1, elements_dct_2) -> Float64\n\nCalculates the cosine similarity between two dictionaries.\n\nArguments\n\nelements_dct_1: Token dictionary contained in the left block including the reference sentence.\nelements_dct_2: Token dictionary contained in the block to the right of the reference sentence.\n\n\n\n\n\n","category":"method"},{"location":"index.html#TextSegmentation.Utls.count_elements-Tuple{Any}","page":"Home","title":"TextSegmentation.Utls.count_elements","text":"count_elements(sequence) -> Dict{String, Int64}\n\nCounts the number of elements per token from a word segmented sentence.\n\nArguments\n\nsequence: Word Segmented Sequence.\n\n\n\n\n\n","category":"method"},{"location":"index.html#TextSegmentation.Utls.merge_elements-Tuple{TextSegmentation.Utls.SentenceElements, Any}","page":"Home","title":"TextSegmentation.Utls.merge_elements","text":"merge_elements(dct)\n\nMerge a dictionary that counts tokens in a sentence by element.\n\nArguments\n\ndct: A dictionary with the number of elements counted for each token.\n\n\n\n\n\n","category":"method"},{"location":"index.html#TextSegmentation.Utls.tokenize-Tuple{Any}","page":"Home","title":"TextSegmentation.Utls.tokenize","text":"tokenize(sentence) -> Vector{SubString{String}}\n\nPerform preprocessing such as erasing symbols, converting uppercase letters to lowercase, word segmentation, etc.\n\nArguments\n\nsentence: A sentence in a document.\n\n\n\n\n\n","category":"method"},{"location":"index.html#TextSegmentation.TextTiling.SegmentObject","page":"Home","title":"TextSegmentation.TextTiling.SegmentObject","text":"TextTiling.SegmentObject(window_size, smooth_window_size, tokenizer)\n\nTextTiling is a method for finding segment boundaries based on lexical cohesion and similarity between adjacent blocks.\n\nArguments\n\nwindow_size: Sliding window size.\nsmooth_window_size: Window size for smoothing depth scores.\ntokenizer: Tokenizer for word segmentation.\n\n\n\n\n\n","category":"type"},{"location":"index.html#TextSegmentation.TextTiling.segment","page":"Home","title":"TextSegmentation.TextTiling.segment","text":"TextTiling.segment(seg, document, [num_topics]) -> String\n\nPerforms the splitting of the document entered in the document argument.\n\nArguments\n\nseg: Segment object.\ndocument: The document to be text segmented.\nnum_topics: numtopics is the number of topics in the document. If this value is specified, segment boundaries are determined by the number of numtopics, starting with the highest depth score.\n\nExamples\n\nusing TextSegmentation\n\nwindow_size = 2\nsmooth_window_size = 1\nnum_topics = 3\n\ntt = TextTiling.SegmentObject(window_size, smooth_window_size, Utls.tokenize)\nresult = TextTiling.segment(tt, document, num_topics)\nprintln(result)\n000100010000\n\n\n\n\n\n","category":"function"},{"location":"index.html#TextSegmentation.C99.SegmentObject","page":"Home","title":"TextSegmentation.C99.SegmentObject","text":"C99.SegmentObject(window_size, similarity_matrix, rank_matrix, sum_matrix, std_coeff, tokenizer)\n\nC99 is a method for determining segment boundaries through segmented clustering.\n\nArguments\n\nwindow_size: window_size is used to create a rank matrix and specifies the range of adjacent sentences to be referenced.\nsimilarity_matrix: Matrix of calculated cosine similarity between sentences.\nrank_matrix: Each value in the similarity matrix is replaced by a rank in the local domain. A rank is the number of neighboring elements with lower similarity score.\nsum_matrix: Sum of rank matrix in segment regions i to j.\nstd_coeff: std_coeff is used for the threshold that determines the segment boundary. μ and v are the mean and variance of the gradient δD(n) of the internal density.\ntokenizer: Tokenizer for word segmentation.\n\n\n\n\n\n","category":"type"},{"location":"index.html#TextSegmentation.C99.segment-Tuple{Any, Any, Any}","page":"Home","title":"TextSegmentation.C99.segment","text":"C99.segment(seg, document, n) -> String\n\nPerforms the splitting of the document entered in the document argument.\n\nArguments\n\nseg: Segment object.\ndocument: The document to be text segmented.\nn: Document Length.\n\nExamples\n\nusing TextSegmentation\n\nn = length(document)\ninit_matrix = zeros(n, n)\nwindow_size = 2\nstd_coeff = 1.2\n\nc99 = C99.SegmentObject(window_size, init_matrix, init_matrix, init_matrix, std_coeff, Utls.tokenize)\nresult = C99.segment(c99, document, n)\nprintln(result)\n000100010000\n\n\n\n\n\n","category":"method"},{"location":"index.html#TextSegmentation.TopicTiling.SegmentObject","page":"Home","title":"TextSegmentation.TopicTiling.SegmentObject","text":"TopicTiling.SegmentObject(window_size, smooth_window_size, lda_model, dictionary)\n\nTopicTiling is an extension of TextTiling that uses the topic IDs of words in a sentence to calculate the similarity between blocks.\n\nArguments\n\nwindow_size: Sliding window size.\nsmooth_window_size: Window size for smoothing depth scores.\nlda_model: Trained LDA topic model.\ndictionary: A dictionary showing word-id mappings.\n\n\n\n\n\n","category":"type"},{"location":"index.html#TextSegmentation.TopicTiling.segment","page":"Home","title":"TextSegmentation.TopicTiling.segment","text":"TopicTiling.segment(seg, document, [num_topics]) -> String\n\nPerforms the splitting of the document entered in the document argument.\n\nArguments\n\nseg: Segment object.\ndocument: The document to be text segmented.\nnum_topics: numtopics is the number of topics in the document. If this value is specified, segment boundaries are determined by the number of numtopics, starting with the highest depth score.\n\nExamples\n\nusing TextSegmentation\n\n# LDA Topic Model\npygensim = pyimport(\"gensim\")\n# train_document\n# Data to be used when training the LDA topic model.\n# Data from the same domain as the text to be segmented is preferred.\ntokenized_train_document = [Utls.tokenize(i) for i in train_document]\ndictionary = pygensim.corpora.Dictionary(tokenized_train_document)\ncorpus = [dictionary.doc2bow(text) for text in tokenized_train_document]\nlda_model = pygensim.models.ldamodel.LdaModel(\n    corpus = corpus,\n    id2word = dictionary,\n    minimum_probability = 0.0001,\n    num_topics = 3,\n    random_state=1234,\n)\n\n# TopicTiling\nwindow_size = 2\nsmooth_window_size = 1\nnum_topics = 3\nto = TopicTiling.SegmentObject(window_size, smooth_window_size, lda_model, dictionary)\nresult = TopicTiling.segment(to, document, num_topics)\nprintln(result)\n000110000000\n\n\n\n\n\n","category":"function"}]
}
